WRITE_FUNCTION_PROMPT_TEMPLATE = """
## Background:
{task_des}
## Role setting:
- Your task is to complete this predefined function according to the description.

## These are the basic Robot APIs:
```python
{robot_api}
```

## These are the environment description:
These are the basic descriptions of the environment.
{env_des}

## These are the functions you can call directly even if they are not implemented now:
```python
{other_functions}
```

## Task
Complete the following function. The output TEXT format is as follows:
### Reasoning: (reason step by step about how to implement this function.)
### Code:
```python
import ...(if necessary)
{function_content}
    ...(function body,you need to complete it)
```
## Notes:
- The Robot API and existing functions can be called directly without the need imports.
- You need to generate bug-free, directly invocable function code according to Google's coding standards.
- Set default value in input parameters: Any adjustable parameters should be taken as input parameters of the function. Always set a default value for each parameter.
- You can only complete the functions specified in Task according to the specified format; you cannot generate other Helper functions. If necessary, you can define functions within this function.
- Take a holistic approach and reuse **existing functions as much as possible**; this one function is just a link in the entire control system.
- Avoid using global variables, and avoid using the same variable name as the global variable in the function.
- Preserve the function's docstring, with the option to modify its content.
- If there are issues with the function definition or docstring in the task,and you need to modify them, please make sure the function name remains the same.
- Import the required modules before the function name, and do not import them in the function body.
- If the function outputs velocity, then this velocity must be normalized.

""".strip()

WRITE_RUN_PROMPT_TEMPLATE = """
## Background:
{task_des}
## Role setting:
- Your task is to create an interface function for users to call, based on existing functions written by other assistants. Users only need to call this function to complete the predetermined task.

## These are the environment description:
These are the basic descriptions of the environment.
{env_des}

## These are the basic Robot APIs:
```python
{robot_api}
```
## These are the functions generated by other assistants,you can call them directly:
```python
{functions}
```

## Task
Complete the following function. The output TEXT format is as follows:
### Reasoning: (reason step by step about how to implement this function.)
### Code:
```python
import ...(if necessary)
def run_loop():
    '''
    Description: An interface function for users to call, based on existing functions written by other assistants. Users only need to call this function to complete the predetermined task.

    params:
        None
    return:
        None
    '''
    ...(function body,you need to complete it)
```

## Notes:
1. The Robot API and existing functions can be called directly without the need imports.
2. You need to generate bug-free, directly invocable function code according to Google's coding standards.
4. You can only complete the functions specified in Task according to the specified format; you cannot generate other Helper functions. If necessary, you can define functions within this function.
5. You can only call these existing functions and RobotApi, and you cannot define complex logic on your own.
6. Calling time.sleep or any other method to limit frequency is not allowed, as the underlying API has determined a set frequency.
7. Import the required modules before the function name, and do not import them in the function body.
8. You need to ensure that the entire system can update observation data in real time and issue control speeds in real time based on the observation data. If it is not implemented in other functions, you need to achieve this through a While loop .
9. Use the existing high-level functions.
10. Strictly follow the specified format.
""".strip()
